package com.czm;

public class Test01 {

    /*
      1、进程（Process）
       进程是指在操作系统中运行的一个应用程序。比如同时打开QQ、微信，操作系统就会分别启动2个进程。
       每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内。
       在 windows 中，可以通过【任务管理器】查看正在运行的进程。

      2、线程（Thread）
       1个进程要想执行任务，必须得有线程（每1个进程至少要有1个线程）。
       一个进程的所有任务都在线程中执行。

       类比：进程 -> 车间；线程 -> 车间工人；

      3、线程的串行
       线程的串行，是指1个线程中任务的执行是串行的。
            如果要在1个线程中执行多个任务，那么只能一个一个地按顺序执行这些任务。
            在同一时间内，1个线程只能执行1个任务。
       例如：在1个线程中下载3个文件，这3个文件会依次按顺序下载。

      4、多线程
       多线程，是指1个进程中可以开启多个线程，所有线程可以并行（同时）执行不同的任务。
       多线程技术可以提高程序的执行效率。
       例如：同时开启3个线程分别下载3个文件。

      5、多线程的原理
       同一时间，CPU的1个核心只能处理1个线程（只有1个线程在工作）。
       多线程并发（同时）执行，其实是 CPU 快速地在多个线程之间调度（切换）。如果CPU调度线程的时间足够快，就造成了多线程并发执行的假象。
       如果是多核CPU，才是真正地实现了多个线程同时执行。

      6、如果线程非常非常多，会发生什么情况？
       CPU 会在 N 个线程之间调度，消耗大量的 CPU 资源，CPU 会累死。
       每条线程被调度执行的频次会降低（线程的执行效率降低）。

      7、多线程的优缺点
      优点：
        能适当提高程序的执行效率；
        能适当提高资源利用率（CPU、内存利用率）；
      缺点：
        开启线程需要占用一定的内存空间，如果开启大量的线程，会占用大量的内存空间，降低程序的性能；
        线程越多，CPU在调度线程上的开销就越大；
        程序设计更加复杂：比如线程之间的通信问题、多线程的数据共享问题；

      8、默认线程
       ⚠️每一个 Java 程序启动后，会默认开启一个线程，称为主线程（main方法所在的线程）
       每一个线程都是一个 java.lang.Thread 对象，可以通过 Thread.currentThread() 方法获取。

      9、多线程的内存布局
       PC 寄存器（Program Counter Register）；每一个线程都有自己的 PC寄存器。存放JVM正在执行的指令。
       Java 虚拟机栈（Java Virtual Machine Stack）：每一个线程都有自己的 Java虚拟机栈。因为每个方法执行结束（return 返回）就会销毁栈空间，如果所有线程共用一个栈空间，就会冲突。
       堆（Heap）：多个线程共享堆。
       方法区（Method Area）：多个线程共享方法区。
       本地方法栈（Native Method Stack）：每一个线程都有自己的本地方法栈。

       开启一个新的线程，需要分配内存空间：PC 寄存器、Java 虚拟机栈、本地方法栈。

      10、

     */

    public static void main(String[] args) {

        System.out.println("main 执行时所在的线程：" + Thread.currentThread());
    }
}
