package com.czm.d4_abstract_x;

public class Test {
    /*
     1、什么是抽象类？
        在 Java 中有一个关键字叫：abstract，它就是抽象的意思，可以用它修饰类、成员方法。
        abstract 修饰类，这个类就是抽象类；修饰方法，这个方法就是抽象方法；

        抽象类语法：
	        修饰符 abstract class 类名 {
        		修饰符 abstract 返回值类型 方法名称(形参列表);
	        }

     2、抽象类的注意事项、特点
        a、抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类。
        b、类该有的成员(成员变量、方法、构造器)抽象类都可以有。
        c、⚠️抽象类最主要的特点：抽象类不能创建对象，仅作为一种特殊的父类，让子类继承并实现。
        d、⚠️一个类继承抽象类，必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类。

     3、⚠️抽象类的场景和好处
        父类知道每个子类都要做某个行为，但每个子类要做的情况不一样，父类就定义成抽象方法，交给子类去重写实现。
        我们设计这样的抽象类，就是为了更好的支持多态。

        抽象类不是一个必须技术，可用可不用，也可以用父子类继承实现。
        如果使用抽象类实现了多态，则是最佳实践！

     */
    public static void main(String[] args) {
//        A a = new A();  // 报错： A是抽象的; 无法实例化

        B b = new B();
        b.eat();
        b.run();

        System.out.println("====== 抽象类更好的支持了多态 =======");

        Animal a1 = new Cat();
        a1.cry();
        Animal a2 = new Dog();
        a2.cry();

    }
}
