package com.czm.d3_collections.Test04Set;

public class Test02HashCode {

    /*
     1、哈希值
        就是一个 int 类型的数值，Java中每个对象都有一个哈希值。
        Java 中的所有对象，都可以调用 0bejct 类提供的 hashcode 方法，返回该对象自己的哈希值。
            public int hashCode()：返回对象的哈希码值。
     2、对象哈希值的特点
        同一个对象多次调用 hashCode() 方法返回的哈希值是相同的。
        不同的对象，它们的哈希值一般不相同，但也有可能会相同(哈希碰撞)。
            int (-21亿多~21亿多)，如果超过42亿个对象，就会存在hashCode 重复

     3、HashSet 集合的底层原理
        1、为什么添加的元素无序、不重复、无索引?
        2、增删改查数据有什么特点，适合什么场景?

        ⚠️ HashSet 集合是基于 哈希表实现。

     4、哈希表
        ⚠️ 哈希表是一种增删改查数据，性能都较好的数据结构，
        a、JDK8 之前，哈希表==数组+链表

        b、JDK8 开始，哈希表==数组+链表+红黑树

     */

    /*
     1、数据结构 —— 树

     a，二叉树：每个节点最多2个节点，每个节点由父节点地址、值、左节点地址、右节点地址组成。
        度：表示每一个节点的子节点数量；
        树高：树的总层数；
        根节点：最顶层的节点，只有一个；
        其它概念：左子节点、右子节点、左子树、右子树；

     b，二叉查找树（二叉排序树），按照小的左边存、大的右边存，相同的不存。
        查询、排序性能高，开发中常用。
        存在的问题：当数据已经是排好序的，导致查询的性能与单链表一样，查询速度变慢!

     c，平衡二叉树
        在满足查找二叉树的大小规则下，让树尽可能矮小，以此提高查数据的性能。

     2、红黑树，就是可以自平衡的二叉树
        红黑树是一种增删改查数据性能相对都较好的结构，

     */
    public static void main(String[] args) {

        String c1 = "AAA";
        String c2 = "BBB";
        System.out.println(c1.hashCode());
        System.out.println(c2.hashCode());

    }

}
